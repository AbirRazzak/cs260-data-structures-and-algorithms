README

We were initally assigned to do #6, however we decided to drop #6 and instead do #4 in its place. Cody Lau will be working on #4.

-----

1. The data for the experiments to find the numerical constant is indcluded in a pdf called 'Problem 1 Open Hash.pdf' as well as the analysis of the information to find the constant. 

-----

2. To run problem 2: Dictionary - Closed Hash, use the target closedhash through the command

	make closedhash

There is a PDF titled Problem 2 Closed Hash with table and test data for problem 2.

-----

3. Dictionary using Binary Search Tree ADT as data source:

- bst_adt.py is a class file for the BinarySearchTree abstract data type, bst.py imports this file to use Binary Search Trees in its implementation

- For the most part, bst_adt.py follows the books example, however some changes have been made to better adapt to the Python language (textbook implements Binary Search Trees in Pascal)
    - Created a helper method for the BSTNode class called "append" which is designed to replace the pointer to that BSTNode with another node. This was done because Python does not allow reassignments of parameters that are not mutable. So I created a helper function that would do that instead. However, along the way it was difficult to implement a way to replace the pointer of one node to another in Python, so append just takes the attributes of the target node and reassigns
    the attributes of the current node to the target's attributes, thus creating a similar effect.

    - The insert function for Binary Search Trees (seen in the bst_adt.py file as "bst_insert") does not check if a is None. Instead when comparing less than or equal, it will determine if the child is None before deciding to run recursively. This approach was taken because I could find no information about reassigning a parameter in Python. Most likely however, the helper class BSTNode would need to be mutable in order to accomplish this. However because of this implementation,
    the dictionary needs to check if the root is empty before running the Binary Search Tree's insert function. If the root happens to be empty, then it will assign the root itself, rather than having the built-in Binary Search Tree (bst_insert) handle this.

- In bst.py you will see the helper function named "print_dict" which will print out the dictionary it is given, recursively. As a result, the method "printd" was included in the Dictionary implementation for testing purposes to observe the data within the Dictionary/Binary Search Tree. The "print_dict" function will print the current node, and all left children, then coming back up to print all right children.

-----

4. Trie
Make sure that alice30.txt is in the same directory as trie.py
    Run "make trie"
It will return the number of unique words in the file alice30.txt. (it only keeps alphanumeric characters and "-" "'" (hyphen and apostrophe))
It also sees words with capital letters as different than lowercase letters.

-----

5. The adjacency matrixes are made using 2D arrays.
-1 represents there there is no connection between 2 nodes.
The Dijsktra function requires the matrix, the source vertex, and the number of vertices.

-----

7. To run problem 7: Floyd's algorithm, use the target floyd through the command 
	
	make floyd

-----

8. Depth First Search Algorithm and Numbering

To run the test file for this run:
    
    make dfs

Notes: I know there is an enum library in Python, but it seemed overkill for this problem.
